name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run all example executables
      shell: bash
      run: |
        set -e

        EXAMPLES_DIR="./examples"

        for dir in "$EXAMPLES_DIR"/*/; do
          dir_name=$(basename "$dir")
          cd "./examples/$dir_name"

          if [[ "${{ runner.os }}" == "Windows_NT" ]]; then
            exe="example_${dir_name}.exe"
          else
            exe="example_${dir_name}"
          fi

          if [[ -f "$exe" ]]; then
            echo "Running $exe"
            "./$exe"
          else
            echo "Executable '$exe' not found for $dir_name"
          fi

          cd "../.."

        done
    - name: Save artifact path
      id: nnlibpath
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "path=./build/libnnlib.lib" >> $GITHUB_OUTPUT
        else
          echo "path=./build/libnnlib.a" >> $GITHUB_OUTPUT
      shell: bash
    - name: Upload Artifact (nnlib)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: nnlib-${{ runner.os }}-${{ matrix.c_compiler }}
        path: ${{ steps.nnlibpath.outputs.path }}
    
